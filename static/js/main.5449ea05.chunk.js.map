{"version":3,"sources":["helpers/decodeHashString.js","components/Answer.js","components/QuestionDisplay.js","components/Results.js","components/Progress.js","components/Loading.js","App.js","index.js"],"names":["decodeHashString","str","textArea","document","createElement","innerHTML","value","Answers","buttonColor","handleAnswer","answer","className","onClick","QuestionDisplay","handleNextQuestion","showAnswers","data","question","correct_answer","all_answers","map","index","key","Results","score","handleRestart","Progress","currentIndex","userAnswersArray","Loading","App","useState","quizFinished","setQuizFinished","questions","setQuestions","setCurrentIndex","setScore","restart","setRestart","setShowAnswers","userAnswers","setUserAnswers","useEffect","fetch","then","res","json","results","singleQuestion","incorrect_answers","sort","Math","random","length","array","newIndex","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.5449ea05.chunk.js","sourcesContent":["export function decodeHashString(str) {\r\n  const textArea = document.createElement(\"textarea\");\r\n  textArea.innerHTML = str;\r\n  return textArea.value;\r\n}\r\n","import React from \"react\";\r\nimport { decodeHashString } from \"../helpers/decodeHashString\";\r\n\r\nexport default function Answers({ buttonColor, handleAnswer, answer }) {\r\n  return (\r\n    <>\r\n      <button\r\n        className={`button ${buttonColor}`}\r\n        onClick={() => handleAnswer(answer)}\r\n      >\r\n        {decodeHashString(answer)}\r\n      </button>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { decodeHashString } from \"../helpers/decodeHashString\";\r\nimport Answer from \"./Answer\";\r\n\r\nconst QuestionDisplay = ({\r\n  handleNextQuestion,\r\n  handleAnswer,\r\n  showAnswers,\r\n  data: { question, correct_answer, all_answers },\r\n}) => {\r\n  return (\r\n    <>\r\n      <div className=\"question\">{decodeHashString(question)}</div>\r\n      {all_answers.map((answer, index) => {\r\n        const buttonColor = showAnswers\r\n          ? answer === correct_answer\r\n            ? \"green\"\r\n            : \"red\"\r\n          : \"yellow\";\r\n        return (\r\n          <Answer\r\n            buttonColor={buttonColor}\r\n            handleAnswer={handleAnswer}\r\n            answer={answer}\r\n            key={index}\r\n          />\r\n        );\r\n      })}\r\n      {showAnswers ? (\r\n        <>\r\n          <button className=\"button buttonNext\" onClick={handleNextQuestion}>\r\n            Next Question\r\n          </button>\r\n        </>\r\n      ) : (\r\n        <button className=\"button placeholder\">Next Question</button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\nexport default QuestionDisplay;\r\n","import React from \"react\";\r\n\r\nexport default function Results({ score, handleRestart }) {\r\n  return (\r\n    <>\r\n      <div className=\"flexColumn\">\r\n        <h1>Quiz Finished!</h1>\r\n        <h1>Score: {score}</h1>\r\n        <button className=\"button\" onClick={handleRestart}>\r\n          Try Again\r\n        </button>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Progress({ score, currentIndex, userAnswersArray }) {\r\n  return (\r\n    <>\r\n      <div className=\"progress\">\r\n        <p>Score: {score}</p>\r\n        <p>Progress: {currentIndex + 1}/10</p>\r\n      </div>\r\n      <div className=\"progressMeter\">\r\n        <ul className=\"progressMeterBoxes\">\r\n          <>\r\n            {userAnswersArray.map((value, index) => {\r\n              {\r\n                return value === \"good\" ? (\r\n                  <li key={index} className=\"progressMetterSingleBox green\">\r\n                    ✔\r\n                  </li>\r\n                ) : (\r\n                  <li key={index} className=\"progressMetterSingleBox red\">\r\n                    ✘\r\n                  </li>\r\n                );\r\n              }\r\n            })}\r\n          </>\r\n        </ul>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Loading() {\r\n  return (\r\n    <>\r\n      <div className=\"logo\">Quiz</div>\r\n      <div className=\"container\">\r\n        <div className=\"sk-chase\">\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n          <div className=\"sk-chase-dot\"></div>\r\n        </div>\r\n        <h1>Loading questions...</h1>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\r\nimport QuestionDisplay from \"./components/QuestionDisplay\";\r\nimport Results from \"./components/Results\";\r\nimport Progress from \"./components/Progress\";\r\nimport Loading from \"./components/Loading\";\r\n\r\nconst API_URL =\r\n  \"https://opentdb.com/api.php?amount=10&category=18&type=multiple\";\r\n\r\nfunction App() {\r\n  const [quizFinished, setQuizFinished] = useState(false);\r\n  const [questions, setQuestions] = useState([]);\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [score, setScore] = useState(0);\r\n  const [restart, setRestart] = useState(false);\r\n  const [showAnswers, setShowAnswers] = useState(false);\r\n  const [userAnswers, setUserAnswers] = useState([]);\r\n\r\n  //fetch data from API\r\n  useEffect(() => {\r\n    fetch(API_URL)\r\n      .then((res) => res.json())\r\n      .then((data) => {\r\n        const questions = data.results.map((singleQuestion) => ({\r\n          ...singleQuestion,\r\n          all_answers: [\r\n            singleQuestion.correct_answer,\r\n            ...singleQuestion.incorrect_answers,\r\n          ].sort(() => Math.random() - 0.5),\r\n        }));\r\n        setQuestions(questions);\r\n      });\r\n  }, [restart]);\r\n\r\n  const handleAnswer = (answer) => {\r\n    if (!showAnswers) {\r\n      //user's answer validation\r\n      if (answer === questions[currentIndex].correct_answer) {\r\n        setScore((score) => score + 1);\r\n        setUserAnswers((array) => [...array, \"good\"]);\r\n      } else {\r\n        setUserAnswers((array) => [...array, \"bad\"]);\r\n      }\r\n    }\r\n    setShowAnswers(true);\r\n  };\r\n  // next question button logic\r\n  const handleNextQuestion = () => {\r\n    const newIndex = currentIndex + 1;\r\n    setCurrentIndex(newIndex);\r\n    if (newIndex >= questions.length) {\r\n      setQuizFinished(true);\r\n    }\r\n    setShowAnswers(false);\r\n  };\r\n  //reset every state after Restart button click\r\n  const gameRerun = () => {\r\n    setQuizFinished(false);\r\n    setScore(0);\r\n    setCurrentIndex(0);\r\n    setQuestions([]);\r\n    setUserAnswers([]);\r\n    setRestart(!restart);\r\n  };\r\n  // rendering part\r\n  // if user finished the quiz --> render this\r\n  if (quizFinished) {\r\n    return (\r\n      <>\r\n        <div className=\"logo\">Quiz</div>\r\n        <div className=\"container\">\r\n          <Results score={score} handleRestart={gameRerun} />\r\n        </div>\r\n      </>\r\n    );\r\n    // if API call worked --> render this\r\n  } else if (questions.length > 0) {\r\n    return (\r\n      <>\r\n        <div className=\"logo\">Quiz</div>\r\n        <div className=\"container\">\r\n          <div className=\"containerQuiz\">\r\n            <Progress\r\n              score={score}\r\n              currentIndex={currentIndex}\r\n              userAnswersArray={userAnswers}\r\n            />\r\n            <QuestionDisplay\r\n              data={questions[currentIndex]}\r\n              handleAnswer={handleAnswer}\r\n              showAnswers={showAnswers}\r\n              handleNextQuestion={handleNextQuestion}\r\n            />\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n    // if API is processing --> render this\r\n  } else {\r\n    return <Loading />;\r\n  }\r\n}\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./App.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}